const CACHE_NAME = 'concern2care-cache-v1';
const urlsToCache = [
  '/',
  // It's better to not list assets here as they are hashed.
  // A more robust service worker would be generated by a build tool.
  // This basic SW will provide offline fallback for the main page.
];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('Opened cache');
      return cache.addAll(urlsToCache);
    })
  );
});

self.addEventListener('fetch', (event) => {
  // We only want to cache GET requests.
  if (event.request.method !== 'GET') {
    return;
  }

  event.respondWith(
    // Try the network first
    fetch(event.request)
      .then((res) => {
        // Clone the response so we can cache it and return it
        const resClone = res.clone();
        caches
          .open(CACHE_NAME)
          .then((cache) => {
            cache.put(event.request, resClone);
          });
        return res;
      })
      .catch(() => {
        // If the network fails, try to get it from the cache.
        return caches.match(event.request).then((res) => res);
      })
  );
});

self.addEventListener('activate', (event) => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
