import { api, APIError } from "encore.dev/api";
import { referralDB } from "./db";
import { getAuthData } from "~encore/auth";
import log from "encore.dev/log";

export interface ShareEmailRequest {
  supportRequestId: number;
  recipientEmail: string;
  senderName: string;
  message?: string;
}

export interface ShareEmailResponse {
  success: boolean;
  message: string;
}

// Shares a support request via email for student support meetings.
export const shareEmail = api<ShareEmailRequest, ShareEmailResponse>(
  { expose: true, method: "POST", path: "/referrals/:supportRequestId/share", auth: true },
  async (req) => {
    const auth = getAuthData()!;
    const supportRequest = await referralDB.queryRow<{
      id: number;
      student_first_name: string;
      student_last_initial: string;
      grade: string;
      teacher: string;
      teacher_position: string;
      incident_date: string;
      location: string;
      concern_types: string;
      other_concern_type: string | null;
      concern_description: string;
      severity_level: string;
      actions_taken: string;
      other_action_taken: string | null;
      ai_recommendations: string | null;
      created_at: Date;
      created_by_email: string;
    }>`
      SELECT * FROM referrals WHERE id = ${req.supportRequestId}
    `;

    if (!supportRequest) {
      throw APIError.notFound("Support request not found");
    }

    if (!auth.isAdmin && supportRequest.created_by_email !== auth.email) {
      throw APIError.permissionDenied("You do not have permission to share this support request.");
    }

    const concernTypes = JSON.parse(supportRequest.concern_types);
    const actionsTaken = JSON.parse(supportRequest.actions_taken);

    // Create email content
    const emailSubject = `Student Support Request: ${supportRequest.student_first_name} ${supportRequest.student_last_initial}. (Grade ${supportRequest.grade})`;
    
    const emailBody = `
Dear Colleague,

${req.senderName} has shared a student support request with you for an upcoming meeting.

${req.message ? `Message from ${req.senderName}: ${req.message}\n\n` : ''}

STUDENT SUPPORT REQUEST SUMMARY
===============================

Student Information:
- Name: ${supportRequest.student_first_name} ${supportRequest.student_last_initial}.
- Grade: ${supportRequest.grade}
- Teacher: ${supportRequest.teacher} (${supportRequest.teacher_position})
- Support Request ID: #${supportRequest.id}

Incident Details:
- Date: ${new Date(supportRequest.incident_date).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
})}
- Location: ${supportRequest.location}
- Severity Level: ${supportRequest.severity_level.charAt(0).toUpperCase() + supportRequest.severity_level.slice(1)}

Concern Types:
${concernTypes.map((type: string) => `- ${type}`).join('\n')}${supportRequest.other_concern_type ? `\n- ${supportRequest.other_concern_type}` : ''}

Concern Description:
${supportRequest.concern_description}

${actionsTaken.length > 0 || supportRequest.other_action_taken ? `
Actions Already Taken:
${actionsTaken.map((action: string) => `- ${action}`).join('\n')}${supportRequest.other_action_taken ? `\n- ${supportRequest.other_action_taken}` : ''}
` : ''}

${supportRequest.ai_recommendations ? `
AI-Generated Tier 2 Intervention Recommendations:
${supportRequest.ai_recommendations}

⚠️ IMPORTANT DISCLAIMER: These AI-generated recommendations are for informational purposes only and should not replace professional educational assessment. Please refer this student to your school's student support department for proper evaluation and vetting. All AI-generated suggestions must be reviewed and approved by qualified educational professionals before implementation.
` : ''}

Submitted: ${supportRequest.created_at.toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
})}

Generated by Concern2Care from Remynd
`;

    // In a real implementation, you would integrate with an email service like SendGrid, AWS SES, etc.
    // For now, we'll simulate the email sending
    try {
      // Simulate email sending delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Log the email for development purposes
      log.info("Simulating email send", {
        to: req.recipientEmail,
        subject: emailSubject,
        body: emailBody
      });
      
      return {
        success: true,
        message: `Support request shared successfully with ${req.recipientEmail}`
      };
    } catch (error) {
      log.error('Error sending email:', { error });
      throw APIError.internal('Failed to send email. Please try again later.');
    }
  }
);
